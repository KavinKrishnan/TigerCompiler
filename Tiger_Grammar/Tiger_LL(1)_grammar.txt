TP -> let DS in SS end
DS -> TDL VDL FDL
TDL -> ''
TDL -> TD TDL
VDL -> ''
VDL -> VD VDL
FDL -> ''
FDL -> FD FDL
TD -> type id = T ;
T -> TID
T -> array [ INTLIT ] of TID
T -> record FL end
T -> id
FL -> id : TID ; FL
FL -> ''
TID -> int
TID -> float
VD -> var IDL : T OI ;
IDL -> id IDL'
IDL' -> ''
IDL' -> , IDL
OI -> ''
OI -> := C
FD -> function id ( PL ) RT begin SS end ;
PL -> ''
PL -> P PLT
PLT -> ''
PLT -> , P PLT
RT -> ''
RT -> : T
P -> id : T
SS -> S SS'
SS' -> ''
SS' -> SS
S -> if E then SS S'
S' -> endif ;
S' -> else SS endif ;
S -> while E do SS enddo ;
S -> for id := E to E do SS enddo ;
S -> id S''' ;
S''' -> ( EL )
S''' -> LVT := S''
S'' -> id S''''
S'' -> C E'
S'' -> ( E ) E'
S'''' -> ( EL )
S'''' -> LVT E'
S -> break ;
S -> return E ;
S -> let DS in SS end
E -> E'' E'
E' -> ''
E' -> BO E
E'' -> C
E'' -> LV
E'' -> ( E )
C -> INTLIT
C -> FLOATLIT
BO -> +
BO -> -
BO -> *
BO -> /
BO -> =
BO -> <>
BO -> <
BO -> >
BO -> <=
BO -> >=
BO -> &
BO -> |
EL -> ''
EL -> E ELT
ELT -> , E ELT
ELT -> ''
LV -> id LVT
LVT -> [ E ]
LVT -> . id
LVT -> ''


<tiger-program> - TP
<declaration-segment> - DS
<stat-seq> - SS
<type-declaration-list> - TDL
<var-declaration-list> - VDL
<funct-declaration-list> - FDL
<type-declaration> - TD
<var-declaration> - VD
<funct-declaration> - FD
<type> - T
<type-id> - TID
<field-list> - FL
<id-list> - IDL
<optional-init> - OI
<param-list> - PL
<ret-type> - RT
<param> - P
<param-list-tail> - PLT
<stat> - S
<const> - C
<lvalue> - LV
<expr> - E
<opt­prefix> - OP (no longer used)
<expr-list> - EL
<binary-operator> - BO
<expr-list-tail> - ELT
<lvalue-tail> - LVT